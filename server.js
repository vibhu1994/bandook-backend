require('dotenv').config();

const express = require('express');
const axios = require('axios');
const cors = require('cors');
const fs = require('fs');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 5000;

// Paths to your JSON data files
const DIALOGUES_FILE = path.join(__dirname, 'dialogues.json');
const TOKENS_FILE = path.join(__dirname, 'tokens.json');

// Global variables
let dialogues = [];
let defaultDescription = "Activity name auto-generated by BandookDotCom - give your activities the name they need, but not deserve";

// List of generic activity names to target
const defaultActivityNames = [
  "Morning Run", "Evening Run", "Run", "Workout",
  "Ride", "Evening Ride", "Afternoon Run", "Afternoon Ride",
  "Run Endurance", "Race", "Training", "Long Ride"
];

// Load dialogues from JSON file
function loadDialogues() {
  try {
    const data = fs.readFileSync(DIALOGUES_FILE, 'utf-8');
    dialogues = JSON.parse(data);
    console.log(`[INIT] Loaded ${dialogues.length} dialogues`);
  } catch (error) {
    console.error(`[INIT] Failed to load dialogues.json:`, error);
    dialogues = [];
  }
}

// Save dialogues to JSON file
function saveDialogues() {
  try {
    fs.writeFileSync(DIALOGUES_FILE, JSON.stringify(dialogues, null, 2), 'utf-8');
    console.log(`[SAVE] dialogues.json saved successfully`);
  } catch (error) {
    console.error(`[SAVE] Failed to save dialogues.json:`, error);
  }
}

// Load tokens (access + refresh + expiry) from JSON file
function loadTokens() {
  try {
    const data = fs.readFileSync(TOKENS_FILE, 'utf-8');
    const tokens = JSON.parse(data);
    console.log(`[INIT] Loaded tokens.json with tokens`);
    return tokens;
  } catch (error) {
    console.error(`[INIT] Failed to load tokens.json:`, error);
    return null;
  }
}

// Save tokens to JSON file
function saveTokens(tokens) {
  try {
    fs.writeFileSync(TOKENS_FILE, JSON.stringify(tokens, null, 2), 'utf-8');
    console.log(`[SAVE] tokens.json saved/updated successfully`);
  } catch (error) {
    console.error(`[SAVE] Failed to save tokens.json:`, error);
  }
}

// Function to get a fresh access token, refresh if needed
async function getFreshAccessToken() {
  console.log(`[TOKEN] Checking for fresh access token...`);
  const tokens = loadTokens();
  if (!tokens) throw new Error('Token data not found. Please authenticate first.');

  const now = Math.floor(Date.now() / 1000);
  if (tokens.expires_at && (tokens.expires_at - now < 120)) {
    console.log(`[TOKEN] Token expired or near expiry. Refreshing...`);
    try {
      const response = await axios.post('https://www.strava.com/oauth/token', null, {
        params: {
          client_id: process.env.STRAVA_CLIENT_ID,
          client_secret: process.env.STRAVA_CLIENT_SECRET,
          grant_type: 'refresh_token',
          refresh_token: tokens.refresh_token
        }
      });
      const refreshed = response.data;
      tokens.access_token = refreshed.access_token;
      tokens.refresh_token = refreshed.refresh_token;
      tokens.expires_at = refreshed.expires_at;
      saveTokens(tokens);
      console.log(`[TOKEN] Token refreshed and saved. Expires at ${tokens.expires_at}`);
      return tokens.access_token;
    } catch (error) {
      console.error(`[TOKEN] Failed to refresh token:`, error.response?.data || error.message);
      throw error;
    }
  } else {
    console.log(`[TOKEN] Existing token is valid until ${tokens.expires_at}`);
    return tokens.access_token;
  }
}

// Initialize dialogues on startup
loadDialogues();

// Middleware
app.use(cors());
app.use(express.json());

// --- Routes start ---

// OAuth token exchange endpoint - logs each step
app.post('/api/token', async (req, res) => {
  console.log(`[OAUTH] Received OAuth code exchange request`);
  const { code } = req.body;

  if (!code) {
    console.log('[OAUTH] No code provided in request');
    return res.status(400).json({ error: "Authorization code required" });
  }

  try {
    const response = await axios.post('https://www.strava.com/oauth/token', {
      client_id: process.env.STRAVA_CLIENT_ID,
      client_secret: process.env.STRAVA_CLIENT_SECRET,
      code,
      grant_type: 'authorization_code',
    });
    console.log('[OAUTH] Successfully exchanged code for tokens');

    const tokens = {
      access_token: response.data.access_token,
      refresh_token: response.data.refresh_token,
      expires_at: response.data.expires_at
    };

    saveTokens(tokens);

    res.json(tokens);
  } catch (error) {
    console.error('[OAUTH] Error exchanging OAuth code:', error.response?.data || error.message);
    res.status(500).json({ error: error.response?.data || error.message });
  }
});

// Fetch user activities
app.get('/api/activities', async (req, res) => {
  console.log('[API] Fetching user activities');

  try {
    const token = await getFreshAccessToken();
    const response = await axios.get('https://www.strava.com/api/v3/athlete/activities', {
      headers: { Authorization: `Bearer ${token}` },
      params: { per_page: 50 }
    });
    console.log(`[API] Retrieved ${response.data.length} activities`);
    res.json(response.data);
  } catch (error) {
    console.error('[API] Failed to fetch activities:', error.response?.data || error.message);
    res.status(500).json({ error: error.response?.data || error.message });
  }
});

// Rename a specific activity manually
app.put('/api/rename', async (req, res) => {
  console.log('[API] Rename activity request received');
  const { activityId } = req.body;

  if (!activityId) {
    console.log('[API] Missing activityId');
    return res.status(400).json({ error: "activityId is required" });
  }

  try {
    const token = await getFreshAccessToken();
    if (!dialogues.length) {
      console.log('[API] No dialogues loaded');
      return res.status(500).json({ error: "No dialogues available" });
    }

    const dialogue = dialogues[Math.floor(Math.random() * dialogues.length)];
    const newName = dialogue.dialogue;
    const newDescription = `— ${dialogue.movie} (${dialogue.year})\n${defaultDescription}`;

    const response = await axios.put(`https://www.strava.com/api/v3/activities/${activityId}`, {
      name: newName,
      description: newDescription
    }, { headers: { Authorization: `Bearer ${token}` } });

    console.log(`[API] Activity ${activityId} renamed to "${newName}"`);
    res.json(response.data);
  } catch (error) {
    console.error('[API] Failed to rename activity:', error.response?.data || error.message);
    res.status(500).json({ error: error.response?.data || error.message });
  }
});

// Add a new dialogue
app.post('/api/add', (req, res) => {
  console.log('[API] Add dialogue request received');
  const { dialogue, movie, year } = req.body;

  if (!dialogue || !movie || !year) {
    console.log('[API] Missing required fields');
    return res.status(400).json({ error: "dialogue, movie, and year are required" });
  }

  if (!Number.isInteger(year)) {
    console.log('[API] Year is not an integer');
    return res.status(400).json({ error: "year must be an integer" });
  }

  if (dialogues.find(d => d.dialogue.toLowerCase() === dialogue.toLowerCase())) {
    console.log('[API] Duplicate dialogue detected');
    return res.status(409).json({ error: "Dialogue already exists" });
  }

  dialogues.push({ dialogue, movie, year });
  saveDialogues();

  console.log(`[API] Added dialogue for "${movie}"`);
  res.json({ success: true, totalDialogues: dialogues.length });
});

// Get current description
app.get('/api/description', (req, res) => {
  console.log('[API] Get description request');
  res.json({ description: defaultDescription });
});

// Update description
app.post('/api/description', (req, res) => {
  console.log('[API] Update description request received');
  const { description } = req.body;

  if (!description || !description.trim()) {
    console.log('[API] Empty description received');
    return res.status(400).json({ error: "Description is required" });
  }

  defaultDescription = description.trim();
  console.log('[API] Description updated');
  res.json({ success: true, description: defaultDescription });
});

// Manual trigger to rename recent activities
app.post('/api/auto-rename', async (req, res) => {
  console.log('[API] Auto-rename trigger received');

  try {
    const token = await getFreshAccessToken();
    const response = await axios.get('https://www.strava.com/api/v3/athlete/activities', {
      headers: { Authorization: `Bearer ${token}` },
      params: { per_page: 30 }
    });

    const activities = response.data;
    const renamed = [];

    for (const activity of activities) {
      if (defaultActivityNames.includes(activity.name)) {
        if (!dialogues.length) continue;

        const dialogue = dialogues[Math.floor(Math.random() * dialogues.length)];
        const newName = dialogue.dialogue;
        const newDescription = `— ${dialogue.movie} (${dialogue.year})\n${defaultDescription}`;

        await axios.put(`https://www.strava.com/api/v3/activities/${activity.id}`, {
          name: newName,
          description: newDescription
        }, { headers: { Authorization: `Bearer ${token}` } });

        renamed.push({ id: activity.id, oldName: activity.name, newName });
        console.log(`[API] Renamed activity ${activity.id} from "${activity.name}" to "${newName}"`);
      }
    }

    res.json({ success: true, renamed });
  } catch (error) {
    console.error('[API] Auto-renaming error:', error.response?.data || error.message);
    res.status(500).json({ error: error.response?.data || error.message });
  }
});

// Webhook verification endpoint (JSON response as per your request)
app.get('/webhook', (req, res) => {
  const mode = req.query['hub.mode'];
  const token = req.query['hub.verify_token'];
  const challenge = req.query['hub.challenge'];

  console.log('[WEBHOOK] Verification request:', { mode, token, challenge, expected: process.env.VERIFY_TOKEN });

  if (mode === 'subscribe' && token === process.env.VERIFY_TOKEN) {
    console.log('[WEBHOOK] Verified!');
    res.json({ 'hub.challenge': challenge });
  } else {
    console.log('[WEBHOOK] Verification failed');
    res.status(403).send('Forbidden');
  }
});

// Webhook event receiver and auto-renamer
app.post('/webhook', async (req, res) => {
  console.log('[WEBHOOK] Event received:', JSON.stringify(req.body));
  res.status(200).send('EVENT_RECEIVED');

  const { aspect_type, object_type, object_id, owner_id } = req.body || {};

  try {
    if (object_type === 'activity' && aspect_type === 'create' && Number(owner_id) === Number(process.env.STRAVA_ATHLETE_ID)) {
      // Wait a moment for the new activity to become available in the API
      await new Promise(r => setTimeout(r, 2000));

      const token = await getFreshAccessToken();

      const activityResp = await axios.get(`https://www.strava.com/api/v3/activities/${object_id}`, {
        headers: { Authorization: `Bearer ${token}` }
      });

      const activity = activityResp.data;
      if (defaultActivityNames.includes(activity.name)) {
        if (!dialogues.length) return;

        const dialogue = dialogues[Math.floor(Math.random() * dialogues.length)];
        const newName = dialogue.dialogue;
        const newDescription = `— ${dialogue.movie} (${dialogue.year})\n${defaultDescription}`;

        await axios.put(`https://www.strava.com/api/v3/activities/${object_id}`, {
          name: newName,
          description: newDescription
        }, { headers: { Authorization: `Bearer ${token}` } });

        console.log(`[WEBHOOK] Auto-renamed activity ${object_id} from "${activity.name}" to "${newName}"`);
      }
    }
  } catch (error) {
    console.error(`[WEBHOOK] Error handling webhook event:`, error.response?.data || error.message);
  }

});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`[SERVER] Listening on port ${PORT}`);
});
