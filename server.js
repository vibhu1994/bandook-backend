require('dotenv').config();

const express = require('express');
const axios = require('axios');
const cors = require('cors');
const fs = require('fs');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors());
app.use(express.json());

// File paths
const DIALOGUES_FILE = path.join(__dirname, 'dialogues.json');
const TOKENS_FILE = path.join(__dirname, 'tokens.json');

// Global data holders
let dialogues = [];
let defaultDescription = "Activity name auto generated by BandookDotCom - give your activities the names they need, but maybe not deserve";

// Load dialogues from file
function loadDialogues() {
  try {
    const data = fs.readFileSync(DIALOGUES_FILE, 'utf-8');
    dialogues = JSON.parse(data);
    console.log(`Loaded ${dialogues.length} dialogues`);
  } catch (err) {
    console.error('Failed to load dialogues file:', err);
    dialogues = [];
  }
}

// Save dialogues to file
function saveDialogues() {
  try {
    fs.writeFileSync(DIALOGUES_FILE, JSON.stringify(dialogues, null, 2), 'utf-8');
  } catch (err) {
    console.error('Failed to save dialogues:', err);
  }
}

// Load tokens from file
function loadTokens() {
  try {
    const data = fs.readFileSync(TOKENS_FILE, 'utf-8');
    return JSON.parse(data);
  } catch (err) {
    console.error('Failed to load tokens file:', err);
    return null;
  }
}

// Save tokens to file
function saveTokens(tokens) {
  try {
    fs.writeFileSync(TOKENS_FILE, JSON.stringify(tokens, null, 2), 'utf-8');
  } catch (err) {
    console.error('Failed to save tokens:', err);
  }
}

// Auto refresh access token if expired or near expiry
async function getFreshAccessToken() {
  let tokens = loadTokens();
  if (!tokens) throw new Error('Tokens not found; please perform OAuth login flow');

  const now = Math.floor(Date.now() / 1000);
  // Refresh if expiring within next 2 minutes
  if (tokens.expires_at && tokens.expires_at - now < 120) {
    console.log('Access token expired or near expiry, refreshing...');
    try {
      const response = await axios.post('https://www.strava.com/oauth/token', null, {
        params: {
          client_id: process.env.STRAVA_CLIENT_ID,
          client_secret: process.env.STRAVA_CLIENT_SECRET,
          grant_type: 'refresh_token',
          refresh_token: tokens.refresh_token
        }
      });
      const refreshed = response.data;
      tokens.access_token = refreshed.access_token;
      tokens.refresh_token = refreshed.refresh_token;
      tokens.expires_at = refreshed.expires_at;
      saveTokens(tokens);
      console.log('Access token refreshed successfully');
      return tokens.access_token;
    } catch (e) {
      console.error('Failed to refresh access token:', e.response?.data || e.message);
      throw e;
    }
  } else {
    return tokens.access_token;
  }
}

// Load dialogues initially
loadDialogues();

// List of default/generic activity names to trigger rename
const defaultActivityNames = [
  "Morning Run",
  "Evening Run",
  "Night Run",
  "Workout",
  "Ride",
  "Evening Ride",
  "Afternoon Run",
  "Afternoon Ride",
  "Run Endurance",
  "Race",
  "Training",
  "Long Ride",
];

// --- API Routes ---

// Exchange authorization code for Strava tokens (first-time OAuth)
app.post('/api/token', async (req, res) => {
  try {
    const { code } = req.body;
    if (!code) return res.status(400).json({ error: "Authorization code is required" });

    const response = await axios.post('https://www.strava.com/oauth/token', {
      client_id: process.env.STRAVA_CLIENT_ID,
      client_secret: process.env.STRAVA_CLIENT_SECRET,
      code,
      grant_type: 'authorization_code',
    });

    // Save tokens on disk for refresh logic
    const tokensToSave = {
      access_token: response.data.access_token,
      refresh_token: response.data.refresh_token,
      expires_at: response.data.expires_at
    };
    saveTokens(tokensToSave);

    res.json(response.data);
  } catch (e) {
    console.error("Error exchanging token:", e.response?.data || e.message);
    res.status(500).json({ error: e.response?.data || e.message });
  }
});

// Get user activities
app.get('/api/activities', async (req, res) => {
  try {
    const token = await getFreshAccessToken();
    const response = await axios.get('https://www.strava.com/api/v3/athlete/activities', {
      headers: { Authorization: `Bearer ${token}` },
      params: { per_page: 50 }
    });

    res.json(response.data);
  } catch (e) {
    console.error("Error loading activities:", e.response?.data || e.message);
    res.status(500).json({ error: e.response?.data || e.message });
  }
});

// Rename an activity manually
app.put('/api/rename', async (req, res) => {
  try {
    const token = await getFreshAccessToken();
    const { activityId } = req.body;
    if (!activityId) return res.status(400).json({ error: "ActivityId is required" });

    if (dialogues.length === 0) return res.status(500).json({ error: "No dialogues available." });

    const d = dialogues[Math.floor(Math.random() * dialogues.length)];
    const name = d.dialogue;
    const description = `â€” ${d.movie} (${d.year})\n${defaultDescription}`;

    const response = await axios.put(`https://www.strava.com/api/v3/activities/${activityId}`, {
      name,
      description
    }, {
      headers: { Authorization: `Bearer ${token}` }
    });

    res.json(response.data);
  } catch (e) {
    console.error("Error renaming activity:", e.response?.data || e.message);
    res.status(500).json({ error: e.response?.data || e.message });
  }
});

// Add a new Bollywood dialogue
app.post('/api/add-dialogue', (req, res) => {
  const { dialogue, movie, year } = req.body;
  if (!dialogue || !dialogue.trim()) return res.status(400).json({ error: "Dialogue text is required" });
  if (!movie || !movie.trim()) return res.status(400).json({ error: "Movie name is required" });
  if (!year || !Number.isInteger(year)) return res.status(400).json({ error: "Valid release year is required (integer)" });

  const exists = dialogues.find(d => d.dialogue.toLowerCase() === dialogue.trim().toLowerCase());
  if (exists) return res.status(409).json({ error: "Dialogue already exists" });

  const newEntry = {
    dialogue: dialogue.trim(),
    movie: movie.trim(),
    year
  };

  dialogues.push(newEntry);
  saveDialogues();

  res.json({ success: true, dialogue: newEntry, totalDialogues: dialogues.length });
});

// Get current default description
app.get('/api/default-description', (req, res) => {
  res.json({ description: defaultDescription });
});

// Update default description
app.post('/api/update-description', (req, res) => {
  const { description } = req.body;
  if (!description || !description.trim()) return res.status(400).json({ error: "Description text is required" });

  defaultDescription = description.trim();
  res.json({ success: true, description: defaultDescription });
});

// Auto
