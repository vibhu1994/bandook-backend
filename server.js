require('dotenv').config();

const express = require('express');
const axios = require('axios');
const cors = require('cors');
const fs = require('fs');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors());
app.use(express.json());

// Path to dialogues JSON file
const DIALOGUES_FILE = path.join(__dirname, 'dialogues.json');

// Default dialogues and description loaded on startup
let dialogues = [];
let defaultDescription = "Activity name auto generated by BandookDotCom - give your activities the names they need, but maybe not deserve";

// Load dialogues from file (or initialize if missing)
function loadDialogues() {
  try {
    const data = fs.readFileSync(DIALOGUES_FILE, 'utf-8');
    dialogues = JSON.parse(data);
    console.log(`Loaded ${dialogues.length} dialogues from ${DIALOGUES_FILE}`);
  } catch (err) {
    console.error('Failed to load dialogues file:', err);
    dialogues = [];
  }
}

// Save dialogues back to file after add operations
function saveDialogues() {
  try {
    fs.writeFileSync(DIALOGUES_FILE, JSON.stringify(dialogues, null, 2), 'utf-8');
  } catch (err) {
    console.error('Failed to save dialogues:', err);
  }
}

// Load dialogues on startup
loadDialogues();

// Generic default activity names to target for auto renaming
const defaultActivityNames = [
  "Morning Run",
  "Evening Run",
  "Run",
  "Workout",
  "Ride",
  "Evening Ride",
  "Afternoon Run",
  "Afternoon Ride",
  "Run Endurance",
  "Race",
  "Training",
  "Long Ride",
  // Add more as you see fit
];

// ----------- Routes -----------

// 1. Exchange authorization code for access token
app.post('/api/token', async (req, res) => {
  try {
    const { code } = req.body;
    if (!code) return res.status(400).json({ error: "Authorization code is required" });

    const response = await axios.post('https://www.strava.com/oauth/token', {
      client_id: process.env.STRAVA_CLIENT_ID,
      client_secret: process.env.STRAVA_CLIENT_SECRET,
      code,
      grant_type: 'authorization_code',
    });

    res.json(response.data);
  } catch (e) {
    console.error("Error in /api/token:", e.response?.data || e.message);
    res.status(500).json({ error: e.response?.data || e.message });
  }
});

// 2. Get user activities
app.get('/api/activities', async (req, res) => {
  try {
    const { token } = req.query;
    if (!token) return res.status(400).json({ error: "Access token is required" });

    const response = await axios.get('https://www.strava.com/api/v3/athlete/activities', {
      headers: { Authorization: `Bearer ${token}` },
    });

    res.json(response.data);
  } catch (e) {
    console.error("Error in /api/activities:", e.response?.data || e.message);
    res.status(500).json({ error: e.response?.data || e.message });
  }
});

// 3. Rename activity (pick a random dialogue, update name and description)
app.put('/api/rename', async (req, res) => {
  try {
    const { token, activityId } = req.body;
    if (!token || !activityId) return res.status(400).json({ error: "Access token and activityId required" });

    if (dialogues.length === 0) return res.status(500).json({ error: "No dialogues available" });

    const d = dialogues[Math.floor(Math.random() * dialogues.length)];
    const name = d.dialogue;
    const description = `— ${d.movie} (${d.year})\n${defaultDescription}`;

    const response = await axios.put(
      `https://www.strava.com/api/v3/activities/${activityId}`,
      { name, description },
      { headers: { Authorization: `Bearer ${token}` } }
    );

    res.json(response.data);
  } catch (e) {
    console.error("Error in /api/rename:", e.response?.data || e.message);
    res.status(500).json({ error: e.response?.data || e.message });
  }
});

// 4. Add a new dialogue (if not duplicate)
app.post('/api/add-dialogue', (req, res) => {
  const { dialogue, movie, year } = req.body;

  if (!dialogue || !dialogue.trim()) {
    return res.status(400).json({ error: "Dialogue text is required" });
  }
  if (!movie || !movie.trim()) {
    return res.status(400).json({ error: "Movie name is required" });
  }
  if (!year || !Number.isInteger(year)) {
    return res.status(400).json({ error: "Valid release year is required (integer)" });
  }

  const exists = dialogues.find(
    (d) => d.dialogue.toLowerCase() === dialogue.trim().toLowerCase()
  );

  if (exists) {
    return res.status(409).json({ error: "Dialogue already exists" });
  }

  const newEntry = {
    dialogue: dialogue.trim(),
    movie: movie.trim(),
    year
  };

  dialogues.push(newEntry);
  saveDialogues();

  res.json({ success: true, dialogue: newEntry, totalDialogues: dialogues.length });
});

// 5. Get current default description
app.get('/api/default-description', (req, res) => {
  res.json({ description: defaultDescription });
});

// 6. Update default description
app.post('/api/update-description', (req, res) => {
  const { description } = req.body;
  if (!description || !description.trim()) {
    return res.status(400).json({ error: "Description text is required" });
  }
  defaultDescription = description.trim();
  res.json({ success: true, description: defaultDescription });
});

// 7. Auto rename new activities with generic names
app.post('/api/auto-rename', async (req, res) => {
  try {
    const { token } = req.body;
    if (!token) return res.status(400).json({ error: "Access token required" });

    const activitiesRes = await axios.get(
      'https://www.strava.com/api/v3/athlete/activities',
      {
        headers: { Authorization: `Bearer ${token}` },
        params: { per_page: 30 },
      }
    );

    const activities = activitiesRes.data;
    const renamedActivities = [];

    for (const activity of activities) {
      if (defaultActivityNames.includes(activity.name)) {
        if (dialogues.length === 0) continue;

        const d = dialogues[Math.floor(Math.random() * dialogues.length)];
        const name = d.dialogue;
        const description = `— ${d.movie} (${d.year})\n${defaultDescription}`;

        await axios.put(
          `https://www.strava.com/api/v3/activities/${activity.id}`,
          { name, description },
          { headers: { Authorization: `Bearer ${token}` } }
        );

        renamedActivities.push({ id: activity.id, oldName: activity.name, newName: name });
      }
    }

    res.json({ success: true, renamed: renamedActivities });
  } catch (e) {
    console.error("Error in /api/auto-rename:", e.response?.data || e.message);
    res.status(500).json({ error: e.response?.data || e.message });
  }
});

// Start server
app.listen(PORT, () => {
  console.log(`Server listening on port ${PORT}`);
});
